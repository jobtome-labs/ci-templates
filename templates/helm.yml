.helm:
  image: jobtomelabs/helm-sops-mysql:3.2.0

.helm:deploy:
  extends: .helm
  stage: deploy
  variables:
    GIT_DEPTH: 1
  script:
    - &checkvars |
      #CHECKING VARIABLES PHASE
      for var in "GOOGLE_KEY" "CLUSTER_ZONE" "CLUSTER_NAME" "NAMESPACE" "APP_NAME" "PART_OF" "GOOGLE_PROJECT" "CHARTS_URL" "CHART_NAME"; do
          if [ -z "${!var}" ]; then
            echo
            echo "-> [WARNING] Missing '${var}' variable!"
            echo
            exit 1
          fi
      done
    - &activate |
      # ACTIVATION  PHASE

      echo "${GOOGLE_KEY}" > /tmp/key.json

      gcloud auth activate-service-account --key-file /tmp/key.json

      gcloud config set project "${GOOGLE_PROJECT}"

      echo
      echo "-> Google project '${GOOGLE_PROJECT}' configured!"
      echo
    - &connect |
      # CLUSTER CONNECTION PHASE

      gcloud container clusters get-credentials --zone "${CLUSTER_ZONE}" "${CLUSTER_NAME}"

      kubectl config set-context $(kubectl config current-context) --namespace="${NAMESPACE}"

      echo
      echo "-> Namespace '$(kubectl config view --minify --output jsonpath={..namespace})' configured!"
      echo
      kubectl cluster-info
      echo

    - &environment |
      # CHECK PATHS

      if [ -z "${HELM_DIR}" ]; then
        HELM_DIR=helm
      fi

      if [ -z "${ENVIRONMENT}" ]; then
        ENVIRONMENT=production
      fi

      if [ -n "${APP_NAME_BRANCH}" ]; then
        ENVIRONMENT=feature
      fi

      if [ -d "${HELM_DIR}/${ENVIRONMENT}" ]; then
        echo
        echo "-> Getting manifests from directory '${ENVIRONMENT}'"
        echo
        envsubst < "${HELM_DIR}"/"${ENVIRONMENT}"/values.yaml > /tmp/values.yaml
        HELM_FILES_PATH="${HELM_DIR}/${ENVIRONMENT}"
      fi

      if [ -n "${ENVIRONMENT_PATH}" ] && [ "${ENVIRONMENT_PATH}" != "${ENVIRONMENT}" ]; then
          if [ -d "${HELM_DIR}/${ENVIRONMENT_PATH}" ]; then
            echo
            echo "-> Getting manifests from directory '${ENVIRONMENT_PATH}'"
            echo
            envsubst < "${HELM_DIR}"/"${ENVIRONMENT_PATH}"/values.yaml > /tmp/values.yaml
            HELM_FILES_PATH="${HELM_DIR}/${ENVIRONMENT_PATH}"
          else
            echo
            echo "-> [WARNING] Enviroment directory in '${ENVIRONMENT_PATH}' doesn't exist!"
            echo
          fi
      fi
    
    - |
      # SECRETS APPLICATION
      # Priority: file in repo, then SECRET_YAML

      if [ ! -f "${HELM_FILES_PATH}/secrets.yaml" ] && [ -z "${SECRET_YAML}" ]; then
        echo
        echo "-> [WARN] No secret to apply!"
        echo
      else
        touch /tmp/secrets.yaml

        if [ -f "${HELM_FILES_PATH}/secrets.yaml" ]; then
          if [ -z "${SOPS_KEY}" ] || [ -z "${SOPS_CONF}" ]; then
            echo "[WARN] Cannot apply secrets: missing sops key or conf"
          else
            echo "${SOPS_CONF}" > /tmp/.sops.yaml
            echo "${SOPS_KEY}" > /tmp/sops.json
            GOOGLE_APPLICATION_CREDENTIALS=/tmp/sops.json sops --config /tmp/.sops.yaml -d "${HELM_FILES_PATH}/secrets.yaml" > /tmp/secrets.yaml
          fi
        fi

        if [ -n "${SECRET_YAML}" ]; then
          echo "${SECRET_YAML}" | base64 -d >> /tmp/secrets.yaml
        fi

        envsubst < /tmp/secrets.yaml > /tmp/secrets.yaml.tmp && mv /tmp/secrets.yaml.tmp /tmp/secrets.yaml

        kubectl apply -f /tmp/secrets.yaml

        echo
        echo "-> Secrets deployed!"
        echo
      fi

    - &helmsetup |
      # HELM APPLICATION
      helm repo add current-repo "${CHARTS_URL}"
      helm repo update

      echo
      helm search repo current-repo/"${CHART_NAME}"
      echo

      echo "Chart version - ${CHART_VERSION}"

      if [ -z "${CHART_VERSION}" ]; then
        CHART_VERSION=$(helm search repo current-repo/"${CHART_NAME}" | tail -n 1 | awk '{print $2}')
      fi

      if [ -z "${TIMEOUT}" ]; then
        TIMEOUT=600s
      fi

    - &helmapply |
      cat << EOF > /tmp/replacer.sh
      #!/bin/bash
      sed 's/name: "${NAMESPACE}"/name: "${APP_NAME}"/g' | sed 's/-tls/-tls-${APP_NAME}/g' | awk '/deployment.yaml|service.yaml|ingress.yaml|configmap.yaml/,/---/'
      EOF

      chmod 755 /tmp/replacer.sh

      if [ -n "${APP_NAME_BRANCH}" ]; then
        echo ${APP_NAME}
        echo ${DOMAIN}
        #helm template "current-repo/${CHART_NAME}" -f /tmp/values.yaml --namespace "${NAMESPACE}" --version ${CHART_VERSION} --post-renderer /tmp/replacer.sh --set ingress.ignoreTest=true --set service.ignoreTest=true
        helm upgrade --install --atomic "${APP_NAME_BRANCH}" "current-repo/${CHART_NAME}" --wait --timeout "${TIMEOUT}" -f /tmp/values.yaml --namespace "${NAMESPACE}" --version ${CHART_VERSION} --post-renderer /tmp/replacer.sh --set ingress.ignoreTest=true --set service.ignoreTest=true
      else
        helm upgrade --install --atomic "${APP_NAME}" "current-repo/${CHART_NAME}" --wait --timeout "${TIMEOUT}" -f /tmp/values.yaml --namespace "${NAMESPACE}" --version ${CHART_VERSION} --post-renderer /tmp/replacer.sh --set ingress.ignoreTest=true --set service.ignoreTest=true
      fi
      
      sleep 5

      echo
      echo "-> App ${APP_NAME} released! Chart version is ${CHART_VERSION}"
      echo

deploy:quality:helm:
  extends: .helm:deploy
  only:
    - master
  environment:
    name: ${ENVIRONMENT_NAME}
    url: https://${DOMAIN}

.deploy:production:helm:
  extends: .helm:deploy
  only:
    - /^v.+$/i
  except:
    - branches
  environment:
    name: ${ENVIRONMENT_NAME}
    url: https://${DOMAIN}

.verify:
  extends: .helm
  variables:
    GIT_STRATEGY: none
  script:
    - *checkvars
    - *activate
    - *connect
    - |
      # HELM TEST

      echo
      echo "-> Testing ${APP_NAME} ! Version of the tests: ${CHART_VERSION}"
      echo

      if [ -z "${TIMEOUT}" ]; then
        TIMEOUT=600s
      fi

      STATUS=0

      helm test "${APP_NAME}" --logs --timeout "${TIMEOUT}" --namespace "${NAMESPACE}" \
        || STATUS=1;


      if [ "${STATUS}" = "1" ]; then
        echo
        echo "-> Tests have failed on ${ENVIRONMENT} for '${APP_NAME}' !"
        echo

        # ROLLBACK PHASE

        echo
        echo "-> Rolling back ${APP_NAME} !"
        echo

        helm rollback "${APP_NAME}" --wait --timeout "${TIMEOUT}"

        exit 1
      fi
 
.stop:
  extends: .helm
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_MERGE_REQUEST_ID && $CI_COMMIT_REF_NAME =~ /^feat/
      when: manual
  script:
    - echo "Remove feature branch app"
    - *checkvars
    - *activate
    - *connect
    - *environment
    - *helmsetup
    - |
      # HELM TEST
      
      echo
      echo "-> Removing ${APP_NAME} ! Version of the tests: ${CHART_VERSION}"
      echo
      
      if [ -z "${TIMEOUT}" ]; then
        TIMEOUT=600s
      fi
      
      STATUS=0
      
      helm delete "${APP_NAME}" --namespace "${NAMESPACE}" || STATUS=1;
      
      if [ "${STATUS}" = "1" ]; then
        echo
        echo "-> Removal has failed on ${ENVIRONMENT} for '${APP_NAME}' !"
        echo
        exit 1
      fi
