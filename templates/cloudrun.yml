---
.cloudrun:deploy:
  image: europe-west1-docker.pkg.dev/jobtome-platform/public/ci-image-gcp:v1.6.0

  stage: deploy

  variables:
    GIT_DEPTH: 1

  script:
    - &connection |
      # CLUSTER CONNECTION PHASE

      for var in "GOOGLE_PROJECT" "REGION" "GOOGLE_KEY" "SERVICE_NAME" "PLATFORM" "GAR_IMAGE" "IMAGE_TAG"; do
        if [ -z "${!var}" ]; then
          echo
          echo "-> [ERROR] Missing '${var}' Variable!"
          echo

          exit 1
        fi
      done

      echo "${GOOGLE_KEY}" > /tmp/key.json

      gcloud config set project ${GOOGLE_PROJECT}
      echo "Google Project '${GOOGLE_PROJECT}' Configured."

      gcloud auth activate-service-account --key-file /tmp/key.json

    - |
      # DEPLOY PHASE

      GAR_IMAGE_FULL_NAME="${GAR_IMAGE}:${IMAGE_TAG}"

      echo
      echo "-> Deploying Cloud Run Service '${SERVICE_NAME}' with Tag '${IMAGE_TAG}' .."
      echo "-> Image: '${GAR_IMAGE_FULL_NAME}'"
      echo

      COMMAND_TO_RUN=( gcloud run deploy ${SERVICE_NAME} --project ${GOOGLE_PROJECT} --region ${REGION} --platform ${PLATFORM} --image ${GAR_IMAGE_FULL_NAME} )

      if [ -n "${SERVICE_ACCOUNT}" ]; then
        echo
        echo "-> Setting Service Account to '${SERVICE_ACCOUNT}'!"
        echo

        COMMAND_TO_RUN+=( --service-account ${SERVICE_ACCOUNT} )
      fi

      if [ -n "${CONNECTIVITY}" ]; then
        echo
        echo "-> Setting Connectivity to '${CONNECTIVITY}'!"
        echo

        COMMAND_TO_RUN+=( --connectivity ${CONNECTIVITY} )
      fi

      if [ -n "${TIMEOUT}" ]; then
        echo
        echo "-> Setting Timeout to '${TIMEOUT}'!"
        echo

        COMMAND_TO_RUN+=( --timeout ${TIMEOUT} )
      fi

      if [ -n "${CONCURRENCY}" ]; then
        echo
        echo "-> Setting Concurrency to '${CONCURRENCY}'!"
        echo

        COMMAND_TO_RUN+=( --concurrency ${CONCURRENCY} )
      fi

      if [ -n "${CPU}" ]; then
        echo
        echo "-> Setting CPU Limit to '${CPU}'!"
        echo

        COMMAND_TO_RUN+=( --cpu ${CPU} )
      fi

      if [ -n "${MEMORY}" ]; then
        echo
        echo "-> Setting Memory Limit to '${MEMORY}'!"
        echo

        COMMAND_TO_RUN+=( --memory ${MEMORY} )
      fi

      if [ -n "${MAX_INSTANCES}" ]; then
        echo
        echo "-> Setting Maximum Instances to '${MAX_INSTANCES}'!"
        echo

        COMMAND_TO_RUN+=( --max-instances ${MAX_INSTANCES} )
      fi

      if [ -n "${ENV_FILE_PATH}" ]; then
        echo
        echo "-> Setting Environment Variables!"
        echo

        COMMAND_TO_RUN+=( --env-vars-file=${ENV_FILE_PATH} )
      fi

      if [ -n "${SECRETS}" ]; then
        echo
        echo "-> Setting Secrets!"
        echo

        COMMAND_TO_RUN+=( --set-secrets=${SECRETS} )
      fi

      if [ -n "${INGRESS}" ]; then
        echo
        echo "-> Setting Ingress to '${INGRESS}'!"
        echo

        COMMAND_TO_RUN+=( --ingress ${INGRESS} )
      fi

      if [ -n "${EXTRA_FLAGS}" ]; then
        echo
        echo "-> Setting additional flags!"
        echo

        COMMAND_TO_RUN+=( ${EXTRA_FLAGS} )
      fi

      STATUS=0

      ${COMMAND_TO_RUN[@]} || STATUS=1

      if [ "${STATUS}" = "1" ]; then
        gcloud run services describe ${SERVICE_NAME} --platform ${PLATFORM} --region ${REGION}
      fi

      exit ${STATUS}

      echo
      echo "-> Deployment on '${ENVIRONMENT}' Completed Successfully!"
      echo "-> Domain: '${DOMAIN}'"
      echo

  environment:
    name: ${ENVIRONMENT}
    url: http://${DOMAIN}
