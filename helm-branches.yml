deploy:quality:helm:branches:
  extends: .helm:deploy
  environment:
    name: review/$CI_BUILD_REF_NAME
    url: https://${CI_COMMIT_REF_SLUG}.${DOMAIN_QUALITY}
    on_stop: stop:quality
  variables:
    CI_COMMIT_TAG: ${CI_COMMIT_SHORT_SHA}
    GOOGLE_KEY: ${GOOGLE_KEY_QUALITY}
    CLUSTER_NAME: ${CLUSTER_NAME_QUALITY}
    CLUSTER_ZONE: ${CLUSTER_ZONE_QUALITY}
    #SECRET_YAML: ${SECRET_YAML_FEATURE}
    NAMESPACE: ${NAMESPACE_QUALITY}
    ENVIRONMENT: feature
    APP_NAME: ${CI_COMMIT_REF_SLUG}
  before_script:
    - |
      # we need SECRET_YAML_QUALITY to perform DB cloning (it contains quality DB name, SECRET_YAML should contain the new name)
      if [ -n "${SECRET_YAML_QUALITY}" ]; then
        export SECRET_YAML_QUALITY=${SECRET_YAML_QUALITY}
      fi      
    - |
      # use a specific CI/CD variable if SECRET_BRANCH is specified in gitlab-ci
      if [ -n "${SECRET_BRANCH}" ]; then
        export SECRET_YAML=${!SECRET_BRANCH}
      # otherwise, use default SECRET_YAML_FEATURE CI/CD variable
      else
        export SECRET_YAML=${SECRET_YAML_FEATURE}
      fi
    - echo ${SECRET_YAML}

    - |
      # use a specific domain if DOMAIN_BRANCH is specified in gitlab-ci
      if [ -n "${DOMAIN_BRANCH}" ]; then
        db=${CI_COMMIT_REF_SLUG}.${DOMAIN_BRANCH}
      # otherwise, use default DOMAIN_QUALITY
      else
        db=${CI_COMMIT_REF_SLUG}.${DOMAIN_QUALITY}
      fi
      export DOMAIN=$( eval echo \$db )
    - echo https://${DOMAIN}

    - |
      # use a specific host if APP_NAME_BRANCH is specified in gitlab-ci
      if [ -n "${APP_NAME_BRANCH}" ]; then
        app=${APP_NAME_BRANCH}
      # otherwise, use default CI_COMMIT_REF_SLUG
      else
        app=${CI_COMMIT_REF_SLUG}
      fi
      export APP_NAME_BRANCH=$( eval echo \$app )
    - echo ${APP_NAME_BRANCH}
    
    - |
      # CHECK VARIABLES PHASE
      for var in "GOOGLE_KEY_QUALITY" "CLUSTER_NAME_QUALITY" "CLUSTER_ZONE_QUALITY" "NAMESPACE_QUALITY"; do
          if [ -z "${!var}" ]; then
            echo "Missing '${var}' variable!"
            exit 1
          fi
      done
    - |
      # CLONE DB
      echo "Cloning db"
      set +e
      URL=$( echo $SECRET_YAML_QUALITY | base64 -d | grep DATABASE_URL | awk '{ print $2}' | base64 -d )
      echo "URL=${URL}"
      URL_BRANCH=$( echo $SECRET_YAML | base64 -d | grep DATABASE_URL | awk '{ print $2}' | base64 -d )
      set -e
      echo "URL_BRANCH=${URL_BRANCH}"
      if [ -z "${URL}" ]; then
        echo "empty \$URL"
        set +e
        DB_USERNAME=$( echo $SECRET_YAML_QUALITY | base64 -d | grep DB_USERNAME | awk '{ print $2}' | base64 -d )
        DB_PASSWORD=$( echo $SECRET_YAML_QUALITY | base64 -d | grep DB_PASSWORD | awk '{ print $2}' | base64 -d )
        DB_HOST=$( echo $SECRET_YAML_QUALITY | base64 -d | grep DB_HOST | awk '{ print $2}' | base64 -d )
        if [ -n "${DATABASE_NAME_BRANCH}" ]; then
          DB_NAME=$DATABASE_NAME_BRANCH
        else
          DB_NAME=$( echo $SECRET_YAML_QUALITY | base64 -d | grep DB_HOST | awk '{ print $2}' | base64 -d )
        fi
        set -e
        for var in "DB_USERNAME" "DB_PASSWORD" "DB_HOST" "DB_NAME"; do
          if [ -z "${!var}" ]; then
            echo "Warning: Missing '${var}' variable or DATABASE_URL! Not proceeding with DB cloning"
            no_db=1
            break
          fi
        done
        if [ -z "${no_db}" ]; then
          if [ -n "${DATABASE_NAME_BRANCH}" ]; then
            DB_NAME=$DATABASE_NAME_BRANCH
          else
            DB_NAME_FEAT=$( echo $SECRET_YAML | base64 -d | grep DB_HOST | awk '{ print $2}' | base64 -d )
          fi
          mysql -u$DB_USERNAME -p$DB_PASSWORD -h$DB_HOST -e "USE $DB_NAME" || { echo 'DB login failed! Please check credentials' ; exit 1; }
          mysql -u$DB_USERNAME -p$DB_PASSWORD -h$DB_HOST -e "CREATE DATABASE $DB_NAME_FEAT;" || { echo 'DB creation failed! Please check user permission, must have CREATE, REFERENCES and DROP' ; exit 1; }
          mysqldump -u$DB_USERNAME -p$DB_PASSWORD -h$DB_HOST $DB_NAME --opt --single-transaction --skip-add-locks | mysql -u$DB_USERNAME -p$DB_PASSWORD -h$DB_HOST --max_allowed_packet=32M $DB_NAME_FEAT || { echo 'DB cloning failed!' ; exit 1; }
        else
          echo "no_db option was set"
        fi
      else
        echo "URL=${URL}"
        DB_NAME_FEAT=$( echo $URL_BRANCH | awk -F [\/:@?] '{print $8}')
        eval $( echo $URL | awk -v db_name_feat="$DB_NAME_FEAT" -F [\/:@?] '{print "mysql -u" $4 " -p" $5 " -h" $6 " -e" " \x27" "CREATE DATABASE " "\x60" db_name_feat "\x60" "\x27" " ; mysqldump -u" $4 " -p" $5 " -h" $6 " " $8 " --opt --single-transaction --skip-add-locks | mysql -u" $4 " -p" $5 " -h" $6 " --max_allowed_packet=32M " db_name_feat}' ) || { echo 'DB cloning failed with URL! Please check credentials' ; exit 1; }
      fi
  only:
    - merge_requests
  except:
    variables:
      - $CI_COMMIT_REF_NAME !~ /^feat/
  
stop:quality:
  extends: .stop
  allow_failure: true
  environment:
    name: review/$CI_BUILD_REF_NAME
    action: stop
  stage: stop
  variables:
    CI_COMMIT_TAG: ${CI_COMMIT_SHORT_SHA}
    GOOGLE_KEY: ${GOOGLE_KEY_QUALITY}
    CLUSTER_NAME: ${CLUSTER_NAME_QUALITY}
    CLUSTER_ZONE: ${CLUSTER_ZONE_QUALITY}
    #SECRET_YAML: ${SECRET_YAML_QUALITY}
    NAMESPACE: ${NAMESPACE_QUALITY}
    ENVIRONMENT: feature
    APP_NAME: ${CI_COMMIT_REF_SLUG}
  before_script:
    - |
      # use a specific CI/CD variable if SECRET_BRANCH is specified in gitlab-ci
      if [ -n "${SECRET_BRANCH}" ]; then
        export SECRET_YAML=${!SECRET_BRANCH}
      # otherwise, use default SECRET_YAML_FEATURE CI/CD variable
      else
        export SECRET_YAML=${SECRET_YAML_FEATURE}
      fi
    - |
      # CHECK VARIABLES PHASE
      for var in "GOOGLE_KEY_QUALITY" "CLUSTER_NAME_QUALITY" "CLUSTER_ZONE_QUALITY" "NAMESPACE_QUALITY"; do
          if [ -z "${!var}" ]; then
            echo "Missing '${var}' variable!"
            exit 1
          fi
      done
    - |
      # REMOVE DB
      set +e
      URL=$( echo $SECRET_YAML | base64 -d | grep DATABASE_URL | awk '{ print $2}' | base64 -d )
      set -e
      echo "URL=${URL}"
      if [ -z "${URL}" ]; then
        set +e
        DB_USERNAME=$( echo $SECRET_YAML | base64 -d | grep DB_USERNAME | awk '{ print $2}' | base64 -d )
        DB_PASSWORD=$( echo $SECRET_YAML | base64 -d | grep DB_PASSWORD | awk '{ print $2}' | base64 -d )
        DB_HOST=$( echo $SECRET_YAML | base64 -d | grep DB_HOST | awk '{ print $2}' | base64 -d )
        DB_NAME=$( echo $SECRET_YAML | base64 -d | grep DB_HOST | awk '{ print $2}' | base64 -d )
        set -e
        for var in "DB_USERNAME" "DB_PASSWORD" "DB_HOST" "DB_NAME"; do
          if [ -z "${!var}" ]; then
            echo "Warning: Missing '${var}' variable or DATABASE_URL! Not proceeding with DB deletion"
            no_db=1
            break
          fi
        done
        if [ -z "${no_db}" ]; then
          mysql -u$DB_USERNAME -p$DB_PASSWORD -h$DB_HOST -e "USE $DB_NAME" || { echo 'DB login failed! Please check credentials' ; exit 1; }
          mysql -u$DB_USERNAME -p$DB_PASSWORD -h$DB_HOST -e "DROP DATABASE $DB_NAME;" || { echo 'DB deletion failed! Please check user permission, must have CREATE, REFERENCES and DROP' ; exit 1; }
        else
          echo "no_db option was set"
        fi
      else
        echo $URL | awk -F [\/:@?] '{print "mysql -u" $4 " -p" $5 " -h" $6 " -e" " \x27" "DROP DATABASE " "\x60" $8 "\x60"";" "\x27" }'
        eval $( echo $URL | awk -F [\/:@?] '{print "mysql -u" $4 " -p" $5 " -h" $6 " -e" " \x27" "DROP DATABASE " "\x60" $8 "\x60"";" "\x27" }' ) || { echo 'DB deletion failed with URL! Please check credentials' ; exit 1; }
      fi
